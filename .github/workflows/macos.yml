name: Build and Publish macOS Binaries
on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      run_pkg:
        required: false
        type: boolean
        default: true
      run_dmg:
        required: false
        type: boolean
        default: true

jobs:

  precheck:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          if [[ "${{ inputs.run_pkg }}" == "true" || "${{ inputs.run_dmg }}" == "true" ]]; then
            echo "‚úÖ At least one packaging format enabled"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "üö´ Both run_pkg and run_dmg are false ‚Äî skipping workflow"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  build-binaries:
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: macos-14
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Import certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.MAC_CERTIFICATES }}
          p12-password: ${{ secrets.MAC_CERTIFICATES_PASSWORD }}

      - name: Verify certificates
        run: |
          set -e

          # Certs to check
          certs=("Developer ID Application" "Developer ID Installer")

          # Expiration threshold in days (for warnings)
          warning_days=30
          warning_secs=$((warning_days * 86400))

          for cert_name in "${certs[@]}"; do
            # Try to get the certificate
            if ! cert_pem=$(security find-certificate -c "$cert_name" -p); then
              echo "‚ùå Certificate '$cert_name' not found in keychain"
              exit 1
            fi

            not_after=$(echo "$cert_pem" | openssl x509 -noout -enddate | cut -d= -f2)
            expiry_ts=$(date -j -f "%b %e %T %Y %Z" "$not_after" +%s 2>/dev/null || date -d "$not_after" +%s)
            now_ts=$(date +%s)

            if [ "$expiry_ts" -le "$now_ts" ]; then
              echo "‚ùå Certificate '$cert_name' is expired (expired on $not_after)"
              exit 1
            fi

            if [ $((expiry_ts - now_ts)) -le "$warning_secs" ]; then
              echo "‚ö†Ô∏è Certificate '$cert_name' expires soon on $not_after"
            fi
          done

      - name: Install Swift 6.1.2
        run: |
          curl -L https://download.swift.org/swift-6.1.2-release/xcode/swift-6.1.2-RELEASE/swift-6.1.2-RELEASE-osx.pkg -o swift.pkg
          sudo installer -pkg swift.pkg -target /
          export TOOLCHAIN_PATH="/Library/Developer/Toolchains/swift-6.1.2-RELEASE.xctoolchain/usr/bin"
          echo "$TOOLCHAIN_PATH" >> $GITHUB_PATH
          export PATH="$TOOLCHAIN_PATH:$PATH"
          swift --version

      - name: Build Swift binaries for arm64 and x86_64
        if: inputs.run_pkg
        run: |
          chmod +x scripts/packaging/pkg.sh
          swift build -c release --arch arm64
          swift build -c release --arch x86_64

      - name: Package .pkg and .zip
        if: inputs.run_pkg
        run: scripts/packaging/pkg.sh ${{ inputs.version }}
        env:
          MAC_APP_IDENTITY: ${{ secrets.MAC_APP_IDENTITY }}
          MAC_INSTALLER_IDENTITY: ${{ secrets.MAC_INSTALLER_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}

      - name: Verify .pkg file
        if: inputs.run_pkg
        run: |
          PKG="release/toucan-macos-${{ inputs.version }}.pkg"
          echo "üß™ Verifying $PKG"
          pkgutil --payload-files "$PKG"
          echo "‚úÖ PKG passed verification"

      - name: Test installing .pkg file
        if: inputs.run_pkg
        run: |
          PKG="release/toucan-macos-${{ inputs.version }}.pkg"
          echo "üì¶ Installing $PKG to /"
          sudo installer -pkg "$PKG" -target /
      
          echo "üîç Checking for installed binaries"
          ls -lh /usr/local/bin/toucan*
      
          echo "üìà Version output:"
          /usr/local/bin/toucan --version || echo "‚ö†Ô∏è toucan binary failed to run"

      - name: Upload .pkg file to tag
        if: inputs.run_pkg
        uses: AButler/upload-release-assets@v3.0
        with:
          files: |
            release/toucan-macos-${{ inputs.version }}.pkg
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}

      - name: Upload .zip to tag
        if: inputs.run_pkg
        uses: AButler/upload-release-assets@v3.0
        with:
          files: release/toucan-macos-${{ inputs.version }}.zip
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}

      - name: Upload SHA256 to tag
        if: inputs.run_pkg
        uses: AButler/upload-release-assets@v3.0
        with:
          files: release/toucan-macos-${{ inputs.version }}.sha256
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}

      - name: Create .dmg file
        if: inputs.run_pkg && inputs.run_dmg
        run: ./scripts/packaging/dmg.sh ${{ inputs.version }}
        env:
          MAC_APP_IDENTITY: ${{ secrets.MAC_APP_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}

      - name: Verify .dmg file structure and integrity
        if: inputs.run_pkg && inputs.run_dmg
        run: |
          DMG="release/toucan-macos-${{ inputs.version }}.dmg"
          echo "üß™ Verifying structure of $DMG"
          hdiutil verify "$DMG"
          echo "‚úÖ Verified: $DMG is structurally valid"

      - name: Upload .dmg file to tag
        if: inputs.run_pkg && inputs.run_dmg
        uses: AButler/upload-release-assets@v3.0
        with:
          files: |
            release/toucan-macos-${{ inputs.version }}.dmg
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}