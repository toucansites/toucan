name: Build, Test and Upload Linux Binaries for tag
on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      run_rpm:
        required: false
        type: boolean
        default: true
      run_deb:
        required: false
        type: boolean
        default: true
      static_stdlib:
        required: false
        type: boolean
        default: true

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          if [[ "${{ inputs.run_rpm }}" == "true" || "${{ inputs.run_deb }}" == "true" ]]; then
            echo "‚úÖ At least one packaging format enabled"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "üö´ Both run_rpm and run_deb are false ‚Äî skipping workflow"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  build-binaries:
    needs: precheck
    if: needs.precheck.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    container:
      image: swift:6.0
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Install required Swift tools
        run: |
          chmod +x ./scripts/packaging/*.sh
          apt-get update
          apt-get install -y curl git clang libcurl4-openssl-dev libssl-dev libatomic1 zip

      - name: Install RPM tooling
        if: inputs.run_rpm
        run: apt-get install -y rpm

      - name: Install DEB tooling
        if: inputs.run_deb
        run: apt-get install -y dpkg-dev

      - name: Build with static stdlib
        if: inputs.static_stdlib
        run: |
          echo "üîß Building with static Swift stdlib"
          swift build -c release -Xswiftc -static-stdlib
      
      - name: Build without static stdlib
        if: ${{ !inputs.static_stdlib }}
        run: |
          echo "üîß Building without static Swift stdlib"
          swift build -c release

      - name: Build RPM
        if: inputs.run_rpm
        run: ./scripts/packaging/rpm.sh ${{ inputs.version }}

      - name: Verify RPM
        if: inputs.run_rpm
        run: |
          RPM="build-rpm/toucan-linux-x86_64-${{ inputs.version }}.rpm"
          echo "üß™ Verifying $RPM"
          rpm -Kv "$RPM"
          rpm -qp "$RPM"
          echo "‚úÖ RPM passed verification"

      - name: Build DEB
        if: inputs.run_deb
        run: ./scripts/packaging/deb.sh ${{ inputs.version }}

      - name: Verify DEB
        if: inputs.run_deb
        run: |
          DEB="build-deb/toucan-linux-amd64-${{ inputs.version }}.deb"
          echo "üß™ Verifying $DEB"
          dpkg-deb --info "$DEB"
          dpkg-deb --contents "$DEB"
          echo "‚úÖ DEB passed verification"

      - name: Upload Linux artifacts
        if: inputs.run_rpm || inputs.run_deb
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            ${{ inputs.run_rpm && format('build-rpm/toucan-linux-x86_64-{0}.rpm', inputs.version) || '' }}
            ${{ inputs.run_rpm && format('build-rpm/toucan-linux-{0}.zip', inputs.version) || '' }}
            ${{ inputs.run_rpm && format('build-rpm/toucan-linux-{0}.sha256', inputs.version) || '' }}
            ${{ inputs.run_deb && format('build-deb/toucan-linux-amd64-{0}.deb', inputs.version) || '' }}

  test-and-upload:
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: ./packages

      - name: Check unpacked structure
        run: find packages

      - name: Test RPM in Fedora
        if: inputs.run_rpm
        run: |
          docker run --rm -v "$PWD/packages:/packages" fedora \
            bash -c "dnf install -y /packages/build-rpm/toucan-linux-x86_64-${{ inputs.version }}.rpm && toucan --version"

      - name: Upload RPM binary to tag
        if: inputs.run_rpm
        uses: AButler/upload-release-assets@v3.0
        with:
          files: packages/build-rpm/toucan-linux-x86_64-${{ inputs.version }}.rpm
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}

      - name: Upload zipped Linux binaries
        if: inputs.run_rpm
        uses: AButler/upload-release-assets@v3.0
        with:
          files: packages/build-rpm/toucan-linux-${{ inputs.version }}.zip
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}

      - name: Upload SHA256 for zipped Linux binaries
        if: inputs.run_rpm
        uses: AButler/upload-release-assets@v3.0
        with:
          files: packages/build-rpm/toucan-linux-${{ inputs.version }}.sha256
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}

      - name: Test DEB in Ubuntu
        if: inputs.run_deb
        run: |
          docker run --rm -v "$PWD/packages:/packages" ubuntu \
            bash -c '
              apt-get update &&
              apt-get install -y curl &&
              dpkg -i /packages/build-deb/toucan-linux-amd64-${{ inputs.version }}.deb || apt-get install -f -y &&
              toucan --version
            '

      - name: Upload DEB binary to tag
        if: inputs.run_deb
        uses: AButler/upload-release-assets@v3.0
        with:
          files: packages/build-deb/toucan-linux-amd64-${{ inputs.version }}.deb
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}

  delete-linux-artifacts:
    runs-on: ubuntu-latest
    needs: [build-binaries, test-and-upload]
    if: always()
    steps:
      - name: Delete 'linux-artifacts' if it exists
        run: |
          echo "üßπ Checking for 'linux-artifacts' to delete..."

          # Check that gh CLI is available
          if ! command -v gh &> /dev/null; then
            echo "‚ùå GitHub CLI not found"
            exit 1
          fi

          # Get list of artifacts
          artifacts=$(gh api repos/${{ github.repository }}/actions/artifacts --paginate)
          id=$(echo "$artifacts" | jq -r '.artifacts[] | select(.name=="linux-artifacts") | .id' | head -n1)

          if [[ -z "$id" || "$id" == "null" ]]; then
            echo "‚ÑπÔ∏è No artifact named 'linux-artifacts' found"
          else
            echo "üóë Deleting artifact ID $id"
            gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$id || echo "‚ö†Ô∏è Delete failed, continuing"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}